{"ast":null,"code":"var _jsxFileName = \"/Users/Karlo/faks/Web3/bla/src/components/authentication/createCamp/CreateForm.js\",\n    _s = $RefreshSig$();\n\nimport * as Yup from 'yup';\nimport { useState } from 'react';\nimport { Icon } from '@iconify/react';\nimport { useFormik, Form, FormikProvider } from 'formik';\nimport eyeFill from '@iconify/icons-eva/eye-fill';\nimport eyeOffFill from '@iconify/icons-eva/eye-off-fill';\nimport { useNavigate } from 'react-router-dom'; // material\n\nimport { Stack, TextField, IconButton, InputAdornment } from '@material-ui/core';\nimport { LoadingButton } from '@material-ui/lab';\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Datepicker from '@material-ui/lab/DatePicker';\nimport TimePicker from '@material-ui/lab/TimePicker';\nimport AdapterDateFns from '@material-ui/lab/AdapterDateFns';\nimport LocalizationProvider from '@material-ui/lab/LocalizationProvider'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CreateForm() {\n  _s();\n\n  const navigate = useNavigate();\n  const [showPassword, setShowPassword] = useState(false);\n  const RegisterSchema = Yup.object().shape({\n    firstName: Yup.string().min(2, 'Too Short!').max(50, 'Too Long!').required('First name required'),\n    lastName: Yup.string().min(2, 'Too Short!').max(50, 'Too Long!').required('Last name required'),\n    email: Yup.string().email('Email must be a valid email address').required('Email is required'),\n    password: Yup.string().required('Password is required')\n  });\n  const formik = useFormik({\n    initialValues: {\n      campName: '',\n      campDesc: ''\n    },\n    validationSchema: RegisterSchema,\n    onSubmit: () => {\n      navigate('/dashboard', {\n        replace: true\n      });\n    }\n  });\n  const {\n    errors,\n    touched,\n    handleSubmit,\n    isSubmitting,\n    getFieldProps\n  } = formik;\n  const [selectedDate, setSelectedDate] = React.useState(new Date());\n  const [selectedTime, setSelectedTime] = React.useState(new Date());\n  return /*#__PURE__*/_jsxDEV(FormikProvider, {\n    value: formik,\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      autoComplete: \"off\",\n      noValidate: true,\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(Stack, {\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Campaign name\",\n          ...getFieldProps('campName'),\n          error: Boolean(touched.email && errors.email),\n          helperText: touched.email && errors.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Campaign description\",\n          ...getFieldProps('campDesc'),\n          error: Boolean(touched.email && errors.email),\n          helperText: touched.email && errors.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Stack, {\n          direction: {\n            xs: 'column',\n            sm: 'row'\n          },\n          spacing: 10,\n          children: /*#__PURE__*/_jsxDEV(LocalizationProvider, {\n            dateAdapter: AdapterDateFns,\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              justifyContent: \"space-around\",\n              children: [/*#__PURE__*/_jsxDEV(Datepicker, {\n                disableToolbar: true,\n                variant: \"inline\",\n                inputFormat: \"MM/dd/yyyy\",\n                margin: \"normal\",\n                id: \"date-picker-inline\",\n                value: selectedDate,\n                onChange: e => setSelectedDate(e.target.value),\n                KeyboardButtonProps: {\n                  'aria-label': 'change date'\n                },\n                renderInput: props => /*#__PURE__*/_jsxDEV(TextField, { ...props,\n                  label: \"Date\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 84,\n                  columnNumber: 5\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(TimePicker, {\n                margin: \"normal\",\n                id: \"time-picker\",\n                value: selectedTime,\n                onChange: e => setSelectedTime(e.target.value),\n                KeyboardButtonProps: {\n                  'aria-label': 'change time'\n                },\n                renderInput: props => /*#__PURE__*/_jsxDEV(TextField, { ...props,\n                  label: \"Time\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 96,\n                  columnNumber: 5\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(LoadingButton, {\n          fullWidth: true,\n          size: \"large\",\n          type: \"submit\",\n          variant: \"contained\",\n          loading: isSubmitting,\n          children: \"Register\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n}\n/*\n\n<Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>\n                        <TextField\n                            fullWidth\n                            label=\"First name\"\n                            {...getFieldProps('firstName') }\n                            error={Boolean(touched.firstName && errors.firstName)}\n                            helperText={touched.firstName && errors.firstName}\n                        />\n\n                        <TextField\n                            fullWidth\n                            label=\"Last name\"\n                            {...getFieldProps('lastName') }\n                            error={Boolean(touched.lastName && errors.lastName)}\n                            helperText={touched.lastName && errors.lastName}\n                        />\n                    </Stack>\n\n*/\n\n_s(CreateForm, \"c9dxXGqsF7wPxYgzlFU54q2n0Gk=\", false, function () {\n  return [useNavigate, useFormik];\n});\n\n_c = CreateForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateForm\");","map":{"version":3,"sources":["/Users/Karlo/faks/Web3/bla/src/components/authentication/createCamp/CreateForm.js"],"names":["Yup","useState","Icon","useFormik","Form","FormikProvider","eyeFill","eyeOffFill","useNavigate","Stack","TextField","IconButton","InputAdornment","LoadingButton","React","Grid","Datepicker","TimePicker","AdapterDateFns","LocalizationProvider","CreateForm","navigate","showPassword","setShowPassword","RegisterSchema","object","shape","firstName","string","min","max","required","lastName","email","password","formik","initialValues","campName","campDesc","validationSchema","onSubmit","replace","errors","touched","handleSubmit","isSubmitting","getFieldProps","selectedDate","setSelectedDate","Date","selectedTime","setSelectedTime","Boolean","xs","sm","e","target","value","props"],"mappings":"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","sourcesContent":["import * as Yup from 'yup';\nimport { useState } from 'react';\nimport { Icon } from '@iconify/react';\nimport { useFormik, Form, FormikProvider } from 'formik';\nimport eyeFill from '@iconify/icons-eva/eye-fill';\nimport eyeOffFill from '@iconify/icons-eva/eye-off-fill';\nimport { useNavigate } from 'react-router-dom';\n// material\nimport { Stack, TextField, IconButton, InputAdornment } from '@material-ui/core';\nimport { LoadingButton } from '@material-ui/lab';\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Datepicker from '@material-ui/lab/DatePicker';\nimport TimePicker from '@material-ui/lab/TimePicker';\nimport AdapterDateFns from '@material-ui/lab/AdapterDateFns';\nimport LocalizationProvider from '@material-ui/lab/LocalizationProvider';\n\n// ----------------------------------------------------------------------\n\nexport default function CreateForm() {\n    const navigate = useNavigate();\n    const [showPassword, setShowPassword] = useState(false);\n\n    const RegisterSchema = Yup.object().shape({\n        firstName: Yup.string()\n            .min(2, 'Too Short!')\n            .max(50, 'Too Long!')\n            .required('First name required'),\n        lastName: Yup.string().min(2, 'Too Short!').max(50, 'Too Long!').required('Last name required'),\n        email: Yup.string().email('Email must be a valid email address').required('Email is required'),\n        password: Yup.string().required('Password is required')\n    });\n\n    const formik = useFormik({\n        initialValues: {\n            campName: '',\n            campDesc: ''\n        },\n        validationSchema: RegisterSchema,\n        onSubmit: () => {\n            navigate('/dashboard', { replace: true });\n        }\n    });\n\n    const { errors, touched, handleSubmit, isSubmitting, getFieldProps } = formik;\n    const [selectedDate, setSelectedDate] = React.useState(new Date());\n    const [selectedTime, setSelectedTime] = React.useState(new Date());\n\n    return (\n        <FormikProvider value={formik}>\n            <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n                <Stack spacing={3}>\n                    <TextField\n                        fullWidth\n                        label=\"Campaign name\"\n                        {...getFieldProps('campName') }\n                        error={Boolean(touched.email && errors.email)}\n                        helperText={touched.email && errors.email}\n                    />\n\n                    <TextField\n                        fullWidth\n                        label=\"Campaign description\"\n                        {...getFieldProps('campDesc') }\n                        error={Boolean(touched.email && errors.email)}\n                        helperText={touched.email && errors.email}\n                    />\n\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={10}>\n                    <LocalizationProvider dateAdapter={AdapterDateFns}>\n                        <Grid container justifyContent=\"space-around\">\n                            <Datepicker\n                                disableToolbar\n                                variant=\"inline\"\n                                inputFormat=\"MM/dd/yyyy\"\n                                margin=\"normal\"\n                                id=\"date-picker-inline\"\n                                value={selectedDate}\n                                onChange={e => setSelectedDate(e.target.value)}\n                                KeyboardButtonProps={{\n                                    'aria-label': 'change date',\n                                }}\n                                renderInput={(props) => (\n    <TextField {...props} label=\"Date\"/>\n  )}\n                            />\n                            <TimePicker\n                                margin=\"normal\"\n                                id=\"time-picker\"\n                                value={selectedTime}\n                                onChange={e => setSelectedTime(e.target.value)}\n                                KeyboardButtonProps={{\n                                    'aria-label': 'change time',\n                                }}\n                                renderInput={(props) => (\n    <TextField {...props} label=\"Time\"/>\n  )}\n                            />\n                        </Grid>\n                    </LocalizationProvider>\n                    </Stack>\n\n                    \n                    <LoadingButton\n                        fullWidth\n                        size=\"large\"\n                        type=\"submit\"\n                        variant=\"contained\"\n                        loading={isSubmitting}\n                    >\n                        Register\n          </LoadingButton>\n                </Stack>\n            </Form>\n        </FormikProvider>\n    );\n}\n\n/*\n\n<Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>\n                        <TextField\n                            fullWidth\n                            label=\"First name\"\n                            {...getFieldProps('firstName') }\n                            error={Boolean(touched.firstName && errors.firstName)}\n                            helperText={touched.firstName && errors.firstName}\n                        />\n\n                        <TextField\n                            fullWidth\n                            label=\"Last name\"\n                            {...getFieldProps('lastName') }\n                            error={Boolean(touched.lastName && errors.lastName)}\n                            helperText={touched.lastName && errors.lastName}\n                        />\n                    </Stack>\n\n*/"]},"metadata":{},"sourceType":"module"}